{"version":3,"sources":["methods.js","App.js","serviceWorker.js","index.js"],"names":["volumeAudioProcess","event","x","buf","inputBuffer","getChannelData","bufLength","length","sum","i","Math","abs","this","clipLevel","clipping","lastClip","window","performance","now","rms","sqrt","volume","max","averaging","App","props","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","records","recordStartTime","recording","chunks","_this2","navigator","mediaDevices","getUserMedia","audio","then","stream","audioContext","AudioContext","mediaStreamSource","createMediaStreamSource","meter","clipLag","processor","createScriptProcessor","onaudioprocess","connect","destination","checkClipping","shutdown","disconnect","createAudioMeter","mediaRecorder","MediaRecorder","ondataavailable","e","push","data","intervalWithoutSound","setInterval","Date","getTime","INTERVAL_WITHOUT_SOUND","stop","setState","record","err","start","blob","Blob","type","url","URL","createObjectURL","unshift","id","uniqueId","date","recordEndTime","end","humanizeDuration","round","dayjs","format","ref","element","refs","paused","play","pause","_this3","react_default","a","createElement","className","concat","map","key","onClick","togglePlayback","formatTime","getDuration","controls","src","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.62df9d62.chunk.js","sourcesContent":["function volumeAudioProcess(event) {\n\tvar buf = event.inputBuffer.getChannelData(0);\n    var bufLength = buf.length;\n\tvar sum = 0;\n    var x;\n\n\t// Do a root-mean-square on the samples: sum up the squares...\n    for (var i=0; i<bufLength; i++) {\n    \tx = buf[i];\n    \tif (Math.abs(x)>=this.clipLevel) {\n    \t\tthis.clipping = true;\n    \t\tthis.lastClip = window.performance.now();\n    \t}\n    \tsum += x * x;\n    }\n\n    // ... then take the square root of the sum.\n    var rms =  Math.sqrt(sum / bufLength);\n\n    // Now smooth this out with the averaging factor applied\n    // to the previous sample - take the max here because we\n    // want \"fast attack, slow release.\"\n    this.volume = Math.max(rms, this.volume*this.averaging);\n}\n\nexport default function createAudioMeter(audioContext,clipLevel,averaging,clipLag) {\n\tvar processor = audioContext.createScriptProcessor(512);\n\tprocessor.onaudioprocess = volumeAudioProcess;\n\tprocessor.clipping = false;\n\tprocessor.lastClip = 0;\n\tprocessor.volume = 0;\n\tprocessor.clipLevel = clipLevel || 0.98;\n\tprocessor.averaging = averaging || 0.95;\n\tprocessor.clipLag = clipLag || 750;\n\n\t// this will have no effect, since we don't copy the input to the output,\n\t// but works around a current Chrome bug.\n\tprocessor.connect(audioContext.destination);\n\n\tprocessor.checkClipping =\n\t\tfunction(){\n\t\t\tif (!this.clipping)\n\t\t\t\treturn false;\n\t\t\tif ((this.lastClip + this.clipLag) < window.performance.now())\n\t\t\t\tthis.clipping = false;\n\t\t\treturn this.clipping;\n\t\t};\n\n\tprocessor.shutdown =\n\t\tfunction(){\n\t\t\tthis.disconnect();\n\t\t\tthis.onaudioprocess = null;\n\t\t};\n\n\treturn processor;\n}\n","import React, { Component } from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport humanizeDuration from \"humanize-duration\";\nimport dayjs from \"dayjs\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport createAudioMeter from \"./methods\";\nimport \"./App.css\";\n\nconst VOLUME_LIMIT = 0.01;\nconst INTERVAL_WITHOUT_SOUND = 3000;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      records: [],\n      recordStartTime: null,\n      recording: false\n    };\n    this.chunks = [];\n  }\n  componentDidMount() {\n    if (navigator.mediaDevices.getUserMedia) {\n      const onSuccess = stream => {\n        const audioContext = new AudioContext();\n        const mediaStreamSource = audioContext.createMediaStreamSource(stream);\n        const meter = createAudioMeter(audioContext);\n        mediaStreamSource.connect(meter);\n        this.mediaRecorder = new MediaRecorder(stream);\n        this.mediaRecorder.ondataavailable = e => {\n          this.chunks.push(e.data);\n        };\n        let intervalWithoutSound = 0;\n        setInterval(() => {\n          if (this.state.recording) {\n            if (meter.volume < VOLUME_LIMIT) {\n              intervalWithoutSound += 100;\n              if (intervalWithoutSound === INTERVAL_WITHOUT_SOUND) {\n                if (\n                  new Date().getTime() - this.state.recordStartTime.getTime() <\n                  (INTERVAL_WITHOUT_SOUND + 1000)\n                ) {\n                  this.mediaRecorder.stop();\n                  this.setState({ recording: false, recordStartTime: null });\n                } else {\n                  this.stop();\n                }\n                intervalWithoutSound = 0;\n              }\n            } else {\n              intervalWithoutSound = 0;\n            }\n          } else if (meter.volume > VOLUME_LIMIT) {\n            this.record();\n          }\n        }, 100);\n      };\n      const onError = err => {\n      };\n      navigator.mediaDevices\n        .getUserMedia({ audio: true })\n        .then(onSuccess, onError);\n    } else {\n    }\n  }\n  record() {\n    this.setState({\n      recording: true,\n      recordStartTime: new Date()\n    });\n    this.chunks = [];\n    this.mediaRecorder.start();\n  }\n  stop() {\n    this.mediaRecorder.stop();\n    const blob = new Blob(this.chunks, { type: \"audio/wav\" });\n    const records = this.state.records;\n    const url = window.URL.createObjectURL(blob);\n    records.unshift({\n      id: uniqueId(),\n      date: new Date(),\n      url,\n      recordStartTime: this.state.recordStartTime,\n      recordEndTime: new Date()\n    });\n    this.setState({\n      records,\n      recording: false,\n      recordStartTime: null\n    });\n  }\n  getDuration(start, end) {\n    return humanizeDuration(end - start, { round: true });\n  }\n  formatTime(date) {\n    return dayjs(date).format(\"HH:mm:ss\");\n  }\n  togglePlayback(ref) {\n    const element = this.refs[ref];\n    if (!element.paused) {\n      element.pause();\n    } else {\n      element.play();\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div id=\"bars\">\n            <div className={`bar ${this.state.recording && 'bg-red'}`} />\n            <div className={`bar ${this.state.recording && 'bg-red'}`} />\n            <div className={`bar ${this.state.recording && 'bg-red'}`} />\n            <div className={`bar ${this.state.recording && 'bg-red'}`} />\n            <div className={`bar ${this.state.recording && 'bg-red'}`} />\n            <div className={`bar ${this.state.recording && 'bg-red'}`} />\n            <div className={`bar ${this.state.recording && 'bg-red'}`} />\n            <div className={`bar ${this.state.recording && 'bg-red'}`} />\n            <div className={`bar ${this.state.recording && 'bg-red'}`} />\n            <div className={`bar ${this.state.recording && 'bg-red'}`} />\n          </div>\n          <div>\n            {this.state.records.map(record => {\n              return (\n                <div className=\"record clickable\" key={record.id} onClick={() => this.togglePlayback(record.id)}>\n                  <span className=\"float-left record-info\"><span>{this.formatTime(record.date)}</span></span>\n                  <span className=\"float-right record-info\"><span>{this.getDuration(record.recordStartTime, record.recordEndTime)}</span></span>\n                  <audio controls ref={record.id} id={record.id} src={record.url} />\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}