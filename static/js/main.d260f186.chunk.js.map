{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["window","MediaRecorder","require","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","records","recordStartTime","recording","_this2","navigator","mediaDevices","getUserMedia","audio","then","stream","context","AudioContext","src","createMediaStreamSource","lastSoundTime","Date","getTime","meter","volumemeter","volume","stopRecording","playbackInProgress","startRecording","onended","stop","bind","connect","mediaRecorder","addEventListener","e","getTracks","forEach","i","INTERVAL_WITHOUT_SOUND","url","URL","createObjectURL","data","unshift","id","uniqueId","date","paused","recordEndTime","setState","err","console","error","start","find","record","end","humanizeDuration","round","dayjs","format","recordIndex","findIndex","splice","ref","element","refs","play","pause","currentTime","_this3","react_default","a","createElement","className","concat","map","key","title","onClick","togglePlayback","formatTime","getDuration","removeRecord","href","download","onPlay","handlePlay","onPause","handlePause","Component","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.d260f186.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport uniqueId from \"lodash/uniqueId\";\nimport humanizeDuration from \"humanize-duration\";\nimport dayjs from \"dayjs\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport { AudioContext } from 'standardized-audio-context';\nimport volumemeter from 'volume-meter'\nimport \"./App.css\";\nwindow.MediaRecorder = require(\"audio-recorder-polyfill\");\n\nconst VOLUME_LIMIT = 5;\nconst INTERVAL_WITHOUT_SOUND = 3000;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      records: [],\n      recordStartTime: null,\n      recording: false\n    };\n  }\n  componentDidMount() {\n    if (navigator.mediaDevices.getUserMedia) {\n      const onSuccess = stream => {\n        // Volume meter\n        const context = new AudioContext();\n        const src = context.createMediaStreamSource(stream)\n        let lastSoundTime = new Date().getTime();\n        const meter = volumemeter(context, {}, (volume) => {\n          if (this.state.recording) {\n            if (volume < VOLUME_LIMIT) {\n              if (new Date().getTime() - lastSoundTime >= INTERVAL_WITHOUT_SOUND) {\n                this.stopRecording();\n              }\n            } else {\n              lastSoundTime = new Date().getTime();\n            }\n          } else if (volume > VOLUME_LIMIT && !this.playbackInProgress()) {\n            this.startRecording();\n          }\n        });\n        stream.onended = meter.stop.bind(meter)\n        src.connect(meter)\n\n        // Recorder\n        this.mediaRecorder = new MediaRecorder(stream);\n        this.mediaRecorder.addEventListener(\"dataavailable\", e => {\n          this.mediaRecorder.stream.getTracks().forEach(i => i.stop());\n          if ((new Date().getTime() - this.state.recordStartTime.getTime()) > (INTERVAL_WITHOUT_SOUND + 1000)) {\n            // Save the record if the duration is > 1s\n            const records = this.state.records;\n            const url = window.URL.createObjectURL(e.data);\n            records.unshift({\n              id: uniqueId(),\n              date: this.state.recordStartTime,\n              url,\n              paused: true,\n              recordStartTime: this.state.recordStartTime,\n              recordEndTime: new Date()\n            });\n            this.setState({\n              records,\n              recording: false,\n              recordStartTime: null\n            });\n          } else {\n            // Don't save the record if < 1s\n            this.setState({\n              recording: false,\n              recordStartTime: null\n            });\n          }\n        });\n      };\n      const onError = err => {\n        console.error(err);\n      };\n      navigator.mediaDevices\n        .getUserMedia({ audio: true })\n        .then(onSuccess, onError);\n    } else {\n      console.error(\"Browser doesn't allow audio recording\");\n    }\n  }\n  startRecording() {\n    this.setState({\n      recording: true,\n      recordStartTime: new Date()\n    });\n    this.mediaRecorder.start();\n  }\n  stopRecording() {\n    this.mediaRecorder.stop();\n  }\n  playbackInProgress() {\n    return this.state.records.find(record => !record.paused);\n  }\n  toggleRecord() {\n    if (this.state.recording === true) {\n      this.stopRecording();\n    } else {\n      this.startRecording();\n    }\n  }\n  getDuration(start, end) {\n    return humanizeDuration(end - start, { round: true });\n  }\n  formatTime(date) {\n    return dayjs(date).format(\"DD/MM/YYYY HH:mm:ss\");\n  }\n  removeRecord(id) {\n    const records = this.state.records;\n    const recordIndex = records.findIndex(record => record.id === id);\n    if (recordIndex > -1) {\n      records.splice(recordIndex, 1);\n      this.setState({ records });\n    }\n  }\n  togglePlayback(ref) {\n    const element = this.refs[ref];\n    if (!element.paused) {\n      element.pause();\n      element.currentTime = 0;\n    } else {\n      element.play();\n    }\n  }\n  handlePlay(id) {\n    const records = this.state.records;\n    const recordIndex = records.findIndex(record => record.id === id);\n    if (recordIndex > -1) {\n      records[recordIndex].paused = false;\n      this.setState({ records });\n    }\n  }\n  handlePause(id) {\n    const records = this.state.records;\n    const recordIndex = records.findIndex(record => record.id === id);\n    if (recordIndex > -1) {\n      records[recordIndex].paused = true;\n      this.setState({ records });\n    }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"container\">\n          <div id=\"bars\">\n            <div className={`bar ${this.state.recording && \"bg-red\"}`} />\n            <div className={`bar ${this.state.recording && \"bg-red\"}`} />\n            <div className={`bar ${this.state.recording && \"bg-red\"}`} />\n            <div className={`bar ${this.state.recording && \"bg-red\"}`} />\n            <div className={`bar ${this.state.recording && \"bg-red\"}`} />\n            <div className={`bar ${this.state.recording && \"bg-red\"}`} />\n            <div className={`bar ${this.state.recording && \"bg-red\"}`} />\n            <div className={`bar ${this.state.recording && \"bg-red\"}`} />\n            <div className={`bar ${this.state.recording && \"bg-red\"}`} />\n            <div className={`bar ${this.state.recording && \"bg-red\"}`} />\n          </div>\n          <div>\n            {this.state.records.map(record => {\n              return (\n                <div className=\"record\" key={record.id}>\n                  {record.paused ? (\n                    <i\n                      className=\"fas fa-2x fa-play-circle clickable float-left playback-button\"\n                      title=\"Play\"\n                      onClick={() => this.togglePlayback(record.id)}\n                    />\n                  ) : (\n                    <i\n                      className=\"fas fa-2x fa-pause-circle clickable float-left playback-button\"\n                      title=\"Pause\"\n                      onClick={() => this.togglePlayback(record.id)}\n                    />\n                  )}\n                  <span className=\"text-center\">\n                    {this.formatTime(record.date)} (\n                    {this.getDuration(\n                      record.recordStartTime,\n                      record.recordEndTime\n                    )}\n                    )\n                  </span>\n                  <span title=\"Remove record\" className=\"float-right clickable margin-left-sm\" onClick={() => this.removeRecord(record.id)}>\n                    <i className=\"fas fa-lg fa-trash-alt\" />\n                  </span>\n                  <span title=\"Download record\" className=\"float-right\">\n                    <a\n                      href={record.url}\n                      className=\"text-black\"\n                      download={`record ${this.formatTime(record.date)}.wav`}\n                    >\n                      <i className=\"fas fa-lg fa-download\" />\n                    </a>\n                  </span>\n                  <audio\n                    onPlay={() => this.handlePlay(record.id)}\n                    onPause={() => this.handlePause(record.id)}\n                    ref={record.id}\n                    src={record.url}\n                  />\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}